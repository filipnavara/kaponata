name: build
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: dotnet/nbgv@v0.4.0
        id: nbgv
        with:
          path: src

      - name: Provision CI environment
        run: |
          # The Ansible playbooks will run apt-get update, too, but they won't show the actual
          # error mesasge. Run apt-get update now, so that we can catch any error beforehand.
          sudo apt-get update

          sudo apt-get install ffmpeg -y
          sudo apt-get install libturbojpeg -y

          ansible-galaxy install geerlingguy.docker
          ansible-galaxy install geerlingguy.nodejs
          ansible-galaxy install andrewrothstein.k3d
          ansible-galaxy install andrewrothstein.kubectl
          ansible-galaxy install andrewrothstein.kubernetes-helm
          ansible-galaxy install andrewrothstein.yq

          # Delete files which may cause conflicts
          sudo rm /usr/local/bin/kubectl

          ansible-playbook --version
          ansible-playbook --connection=local --inventory "127.0.0.1," -e 'ansible_python_interpreter=/usr/bin/python3' ci/playbook.yml

      - name: Build operator in release mode
        run: dotnet build -c Release
        working-directory: src/

      - name: Test operator
        run: >
          dotnet test
          --results-directory ${{ github.workspace }}/bin/Kaponata.TestResults/
          --collect:"XPlat Code Coverage"
          --logger "junit;LogFileName=${{ github.workspace }}/bin/operator-{assembly}.TestResults.xml"
          --logger "trx"
          --filter "TestCategory!=IntegrationTest"
          --
          DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
        working-directory: src/

      - name: Generate Code Coverage Report
        uses: danielpalme/ReportGenerator-GitHub-Action@4.8.4
        with:
          reports: ${{ github.workspace }}/bin/Kaponata.TestResults/**/coverage.cobertura.xml
          targetdir: ${{ github.workspace }}/bin/Kaponata.coveragereport/${{ github.ref }}/coverage/
          reporttypes: 'HtmlInline;Cobertura'
        
      - name: Publish Operator Coverage Summary
        uses: 5monkeys/cobertura-action@master
        if: always()
        with:
          path:  ${{ github.workspace }}/bin/Kaponata.coveragereport/${{ github.ref }}/coverage/Cobertura.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 75

      - name: Upload Code Coverage Report
        uses: actions/upload-artifact@v2
        with:
          name: coveragereport
          path: ${{ github.workspace }}/bin/${{ github.ref }}/Kaponata.coveragereport

      - name: Publish Operator Coverage Summary to CI website
        uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: ${{ github.workspace }}/bin/Kaponata.coveragereport/
          container_name: '$web'
          connection_string: ${{ secrets.CiStorageConnectionString }}
          sync: false

      - name: Find Code Coverage Comment
        uses: peter-evans/find-comment@v1
        if: ${{ github.event_name == 'pull_request' }}
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: The code coverage report for this pull request

      - name: Create Code Coverage Comment
        if: ${{ github.event_name == 'pull_request' && steps.fc.outputs.comment-id == 0 }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            The code coverage report for this pull request [is available online](https://kaponataci.z6.web.core.windows.net/${{ github.ref }}/coverage/index.html)

      - name: Package operator
        run: |
          dotnet publish -c Release
          make
        working-directory: src/Kaponata.Operator/

      - name: Package API server
        run: |
          dotnet publish -c Release
          make
        working-directory: src/Kaponata.Api/

      - name: Package sidecars
        run: |
          dotnet publish -c Release
          make
        working-directory: src/Kaponata.Sidecars/

      - name: Package Kaponata.FileSystems NuGet packages
        run: dotnet pack -c Release -o ${{ github.workspace }}/bin/nuget --include-source --include-symbols
        working-directory: src/Kaponata.FileFormats/

      - name: Package Kaponata.iOS NuGet packages
        run: dotnet pack -c Release -o ${{ github.workspace }}/bin/nuget --include-source --include-symbols
        working-directory: src/Kaponata.iOS/

      - name: Package Kapoanta.Android NuGet packages
        run: dotnet pack -c Release -o ${{ github.workspace }}/bin/nuget --include-source --include-symbols
        working-directory: src/Kaponata.Android/

      - name: Package Kaponata.TurboJpeg NuGet packages
        run: dotnet pack -c Release -o ${{ github.workspace }}/bin/nuget --include-source --include-symbols
        working-directory: src/Kaponata.TurboJpeg/

      - name: Package UI
        run: |
          export PATH="$PATH:/usr/local/lib/npm/bin/"

          npm install
          ng build --prod
          make
        working-directory: src/kaponata-ui/

      - name: Create Helm chart
        run: |
          yq e '.version="${{ steps.nbgv.outputs.SemVer2 }}"' -i Chart.yaml
          yq e '.appVersion="${{ steps.nbgv.outputs.SemVer2 }}"' -i Chart.yaml
          yq e '.operator.image.tag="${{ steps.nbgv.outputs.SemVer2 }}"' -i values.yaml
          yq e '.api.image.tag="${{ steps.nbgv.outputs.SemVer2 }}"' -i values.yaml
          yq e '.sidecar.image.tag="${{ steps.nbgv.outputs.SemVer2 }}"' -i charts/usbmuxd/values.yaml

          helm lint .
          helm package . -d ${{ github.workspace }}/bin/charts
        working-directory: src/chart

      - name: Update Helm repository
        run: |
          helm repo index ${{ github.workspace }}/bin/charts/ --url https://ci.kaponata.io/
        working-directory: src/chart

      - name: Upload Helm chart
        uses: actions/upload-artifact@v2
        with:
          name: charts
          path: |
            ${{ github.workspace }}/bin/charts/

      - name: Create k3d cluster
        run: |
          k3d cluster create --api-port 6433 -p "80:80@loadbalancer"
          kubectl create namespace tests

      # We don't built Docker crossarch manifests during CI, so tag the {version}-amd64 image
      # as the {version} image. Then, import the image into k3d.
      - name: Upload images to k3d cluster
        run: |
          docker tag quay.io/kaponata/operator:${{ steps.nbgv.outputs.SemVer2 }}-amd64 quay.io/kaponata/operator:${{ steps.nbgv.outputs.SemVer2 }}
          k3d image import quay.io/kaponata/operator:${{ steps.nbgv.outputs.SemVer2 }}

          docker tag quay.io/kaponata/api:${{ steps.nbgv.outputs.SemVer2 }}-amd64 quay.io/kaponata/api:${{ steps.nbgv.outputs.SemVer2 }}
          k3d image import quay.io/kaponata/api:${{ steps.nbgv.outputs.SemVer2 }}

          docker tag quay.io/kaponata/sidecar:${{ steps.nbgv.outputs.SemVer2 }}-amd64 quay.io/kaponata/sidecar:${{ steps.nbgv.outputs.SemVer2 }}
          k3d image import quay.io/kaponata/sidecar:${{ steps.nbgv.outputs.SemVer2 }}

      # Override the usbmuxd image tag in the usbmuxd subchart to
      # latest-udev-amd64. This fixes an issue where usbmuxd will fail
      # to start on a VM with no USB stack (because libusb fails to
      # initialize.)
      #
      # For images built during CI, we set ImagePullPolicy to Never
      # so that Kubernetes will use the images built locally (and uploaded
      # during the previous step).
      - name: Deploy Helm chart
        run: >
          helm install
          --set usbmuxd.usbmuxd.image.tag=latest-udev-amd64
          --set operator.imagePullPolicy=Never
          --set api.imagePullPolicy=Never
          --wait
          kaponata
          ${{ github.workspace }}/bin/charts/kaponata-${{ steps.nbgv.outputs.SemVer2 }}.tgz || kubectl get pods
      
      - name: Redroid - Install the Android kernel modules
        run: |
          kernel=$(uname -r)

          # install required packages
          sudo apt-get install -y kmod make gcc linux-headers-$kernel

          git clone https://github.com/remote-android/redroid-modules.git

          cd redroid-modules
          make
          sudo make install

      - name: Redroid - Check Android kernel module status
        run: |
          echo "Listing Android kernel modules. This should include 'ashmem_linux' and 'binder_linux'."
          lsmod | grep -e ashmem_linux -e binder_linux

          echo "Listing the binder file system. This should include 'nodev	binder'."
          cat /proc/filesystems | grep binder

          echo "Listing miscellaneous drivers registered on the miscellaneous major device. This should include '56 ashmem'."
          cat /proc/misc | grep ashmem

      - name: Redroid - Creating the Android pod
        run: |
          kubectl create -f ci/redroid.yaml
          kubectl wait --for=condition=ready --timeout=180s pod redroid || kubectl describe pod redroid

      - name: Redroid - Dump logcat output
        if: always()
        run: kubectl exec redroid -- logcat -d

      - name: Run chart tests and integration tests
        run: >
          dotnet test
          --logger "junit;LogFileName=${{ github.workspace }}/bin/chart-{assembly}.TestResults.xml"
          --filter "TestCategory=IntegrationTest"
        working-directory: src/
        
      - name: Kubernetes - dump API server logs
        run: kubectl logs -l app.kubernetes.io/component=api,app.kubernetes.io/name=kaponata --tail=-1
        if: always()

      - name: Kubernetes - dump Guacamole logs
        run: |
          kubectl describe pod -l app.kubernetes.io/name=guacamole,app.kubernetes.io/component=guacamole
          kubectl logs -l app.kubernetes.io/name=guacamole,app.kubernetes.io/component=guacamole --tail=-1
        if: always()

      - name: Kubernetes - dump usbmuxd logs
        run: |
          kubectl describe pod -l app.kubernetes.io/component=usbmuxd,app.kubernetes.io/name=usbmuxd
          kubectl logs -l app.kubernetes.io/component=usbmuxd,app.kubernetes.io/name=usbmuxd --tail=-1 -c usbmuxd
          kubectl logs -l app.kubernetes.io/component=usbmuxd,app.kubernetes.io/name=usbmuxd --tail=-1 -c sidecar
        if: always()

      - name: Delete k3d cluster
        if: always()
        run: |
          k3d cluster delete

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.7
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: "bin/*.TestResults.xml"

      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test
          path: |
            ${{ github.workspace }}/bin/Kaponata.TestResults/

      - name: Login to quay.io
        if: github.ref == 'refs/heads/main'
        run: docker login -u="${{ secrets.QUAY_ACCOUNT_NAME }}" -p="${{ secrets.QUAY_ACCOUNT_TOKEN }}" quay.io

      - name: Publish Operator container image
        if: github.ref == 'refs/heads/main'
        run: make push
        working-directory: src/Kaponata.Operator/

      - name: Publish API server container image
        if: github.ref == 'refs/heads/main'
        run: make push
        working-directory: src/Kaponata.Api/

      - name: Publish Sidecar container image
        if: github.ref == 'refs/heads/main'
        run: make push
        working-directory: src/Kaponata.Sidecars/

      - name: Publish chart CI website
        if: github.ref == 'refs/heads/main'
        uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: ${{ github.workspace }}/bin/charts/
          container_name: '$web'
          connection_string: ${{ secrets.CiStorageConnectionString }}
          sync: false

      - name: Upload NuGet artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: nuget
          path: |
            ${{ github.workspace }}/bin/nuget/

      - name: Publish to NuGet
        if: github.ref == 'refs/heads/main'
        run: |
          dotnet nuget push Kaponata.iOS.*.nupkg -k "${{ secrets.NUGET_TOKEN }}" -s https://api.nuget.org/v3/index.json
          dotnet nuget push Kaponata.Android.*.nupkg -k "${{ secrets.NUGET_TOKEN }}" -s https://api.nuget.org/v3/index.json
          dotnet nuget push Kaponata.TurboJpeg.*.nupkg -k "${{ secrets.NUGET_TOKEN }}" -s https://api.nuget.org/v3/index.json
          dotnet nuget push Kaponata.FileFormats.*.nupkg -k "${{ secrets.NUGET_TOKEN }}" -s https://api.nuget.org/v3/index.json
        working-directory: ${{ github.workspace }}/bin/nuget/
